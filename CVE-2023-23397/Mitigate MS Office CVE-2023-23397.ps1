# Enable execution of scripts
Set-ExecutionPolicy Bypass -Scope Process -Force

# Check if running as administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Warning "This script must be run as an administrator."
    Start-Sleep -Seconds 5
    Start-Process powershell.exe -Verb RunAs -ArgumentList ($MyInvocation.MyCommand.Definition)
    Exit
}

# Display banner
Write-Host "***************************************************"
Write-Host "*  HIGH SEVERITY MS OFFICE VULNERABILITY MITIGATION  *"
Write-Host "*  This script mitigates Microsoft Outlook CVE-2023-23397 vulnerability  *"
Write-Host "*  It follows Microsoft recommendation to temporarily enable Windows Firewall and block outbound port 445/SMB *"
Write-Host "*  This may impact file collaboration on local Sharepoint files or other software packages *"
Write-Host "*  https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-23397  *"
Write-Host "*                                                 *"
Write-Host "***************************************************"

# Check if Windows Firewall is enabled
$firewall = Get-NetFirewallProfile -Name Public

if ($firewall.Enabled -ne "True") {
    # Display warning message if Windows Firewall is disabled
    Write-Warning "Windows Firewall is currently disabled. Disabling the firewall can leave your computer and network at risk of attacks from malicious actors. It is strongly recommended that you enable Windows Firewall to protect your computer and network from unauthorized access and attacks."

    # Prompt user to enable Windows Firewall
    $enable_firewall = Read-Host "Do you want to enable Windows Firewall? (Y/N)"

    if ($enable_firewall -eq "Y") {
        Set-NetFirewallProfile -Name Public -Enabled True
        Write-Host "Windows Firewall has been enabled."
    }
    else {
        Write-Host "Windows Firewall has not been enabled. This script will not work as intended without Windows Firewall enabled."
        return
    }
}
else {
    Write-Host "Windows Firewall is currently enabled."
}

# Check if firewall rule to block outbound traffic on port 445/SMB exists
$rule = Get-NetFirewallRule -DisplayName "Block SMB outbound" -ErrorAction SilentlyContinue

if (!$rule) {
    # Display warning message if firewall rule does not exist
    Write-Warning "Outbound traffic on port 445/SMB is not blocked. Disabling this rule can leave your computer and network at risk of attacks from malicious actors. It is strongly recommended that you enable this rule to prevent attacks exploiting Microsoft Outlook CVE-2023-23397 vulnerability."

    # Prompt user to enable firewall rule
    $enable_rule = Read-Host "Do you want to block outbound traffic on port 445/SMB? (Y/N)"

    if ($enable_rule -eq "Y") {
        New-NetFirewallRule -DisplayName "Block SMB outbound" -Direction Outbound -LocalPort 445 -Protocol TCP -Action Block
        Write-Host "Outbound traffic on port 445/SMB has been blocked."
    }
    else {
        Write-Host "Outbound traffic on port 445/SMB has not been blocked. This script will not mitigate Microsoft Outlook CVE-2023-23397 vulnerability without this rule enabled."
    }
}
else {
    Write-Host "Outbound traffic on port 445/SMB is already blocked."
}
